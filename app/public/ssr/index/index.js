!function(e){function t(t){for(var r,a,c=t[0],s=t[1],u=t[2],f=0,p=[];f<c.length;f++)a=c[f],i[a]&&p.push(i[a][0]),i[a]=0;for(r in s)Object.prototype.hasOwnProperty.call(s,r)&&(e[r]=s[r]);for(l&&l(t);p.length;)p.shift()();return o.push.apply(o,u||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,c=1;c<n.length;c++){var s=n[c];0!==i[s]&&(r=!1)}r&&(o.splice(t--,1),e=a(a.s=n[0]))}return e}var r={},i={4:0},o=[];function a(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=r,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(n,r,function(t){return e[t]}.bind(null,r));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="";var c=window.webpackJsonp=window.webpackJsonp||[],s=c.push.bind(c);c.push=t,c=c.slice();for(var u=0;u<c.length;u++)t(c[u]);var l=s;o.push([45,0]),n()}({2:function(e,t){!function(e,t){var n,r=e.document,i=r.documentElement,o=r.querySelector('meta[name="viewport"]'),a=r.querySelector('meta[name="flexible"]'),c=0,s=0,u=t.flexible||(t.flexible={});if(o)(f=o.getAttribute("content").match(/initial\-scale=([\d\.]+)/))&&(s=parseFloat(f[1]),c=parseInt(1/s));else if(a){var l=a.getAttribute("content");if(l){var f=l.match(/initial\-dpr=([\d\.]+)/),p=l.match(/maximum\-dpr=([\d\.]+)/);f&&(c=parseFloat(f[1]),s=parseFloat((1/c).toFixed(2))),p&&(c=parseFloat(p[1]),s=parseFloat((1/c).toFixed(2)))}}if(!c&&!s){var d=(e.navigator.appVersion.match(/android/gi),e.navigator.appVersion.match(/iphone/gi)),m=e.devicePixelRatio;s=1/(c=d?m>=3&&(!c||c>=3)?3:m>=2&&(!c||c>=2)?2:1:1)}if(i.setAttribute("data-dpr",c),!o)if((o=r.createElement("meta")).setAttribute("name","viewport"),o.setAttribute("content","initial-scale="+s+", maximum-scale="+s+", minimum-scale="+s+", user-scalable=no"),i.firstElementChild)i.firstElementChild.appendChild(o);else{var v=r.createElement("div");v.appendChild(o),r.write(v.innerHTML)}function g(){var t=i.getBoundingClientRect().width/10;i.style.fontSize=t+"px",u.rem=e.rem=t}e.addEventListener("resize",function(){clearTimeout(n),n=setTimeout(g,300)},!1),e.addEventListener("orientationchange",function(){clearTimeout(n),n=setTimeout(g,300)},!1),e.addEventListener("pageshow",function(e){e.persisted&&(clearTimeout(n),n=setTimeout(g,300))},!1),"complete"===r.readyState?r.body.style.fontSize=12*c+"px":r.addEventListener("DOMContentLoaded",function(){r.body.style.fontSize=12*c+"px"},!1),g(),u.dpr=e.dpr=c,u.refreshRem=g,u.rem2px=function(e){var t=parseFloat(e)*this.rem;return"string"==typeof e&&e.match(/rem$/)&&(t+="px"),t},u.px2rem=function(e){var t=parseFloat(e)/this.rem;return"string"==typeof e&&e.match(/px$/)&&(t+="rem"),t}}(window,window.lib||(window.lib={}))},3:function(e,t,n){"use strict";function r(e,t){window.addEventListener("load",function(){navigator.serviceWorker.register(e,{scope:t}).then(function(e){console.log("ServiceWorker registration successful with scope: ",e.scope)}).catch(function(e){console.log("ServiceWorker registration failed: ",e)})})}t.a=function(e,t){"serviceWorker"in navigator&&(navigator.serviceWorker?navigator.serviceWorker.getRegistration(t).then(function(n){n?console.log(n):r(e,t)}):r(e,t),Notification.requestPermission().then(e=>{"denied"===Notification.permission&&console.log("Permission for Notifications was denied")}))}},4:function(e,t,n){"use strict";n(76),n(78),n(80)},45:function(e,t,n){"use strict";n.r(t);n(46),n(74),n(2);var r=n(3);n(4);Object(r.a)("/sw-ssr.js","/ssr")},46:function(e,t){},74:function(e,t){},76:function(e,t){},78:function(e,t){},80:function(e,t){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,