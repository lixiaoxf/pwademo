!function(e){function t(t){for(var r,a,s=t[0],c=t[1],l=t[2],f=0,p=[];f<s.length;f++)a=s[f],i[a]&&p.push(i[a][0]),i[a]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(u&&u(t);p.length;)p.shift()();return o.push.apply(o,l||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,s=1;s<n.length;s++){var c=n[s];0!==i[c]&&(r=!1)}r&&(o.splice(t--,1),e=a(a.s=n[0]))}return e}var r={},i={3:0},o=[];function a(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=r,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(n,r,function(t){return e[t]}.bind(null,r));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="";var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=t,s=s.slice();for(var l=0;l<s.length;l++)t(s[l]);var u=c;o.push([50,0]),n()}({2:function(e,t){!function(e,t){var n,r=e.document,i=r.documentElement,o=r.querySelector('meta[name="viewport"]'),a=r.querySelector('meta[name="flexible"]'),s=0,c=0,l=t.flexible||(t.flexible={});if(o)(f=o.getAttribute("content").match(/initial\-scale=([\d\.]+)/))&&(c=parseFloat(f[1]),s=parseInt(1/c));else if(a){var u=a.getAttribute("content");if(u){var f=u.match(/initial\-dpr=([\d\.]+)/),p=u.match(/maximum\-dpr=([\d\.]+)/);f&&(s=parseFloat(f[1]),c=parseFloat((1/s).toFixed(2))),p&&(s=parseFloat(p[1]),c=parseFloat((1/s).toFixed(2)))}}if(!s&&!c){var d=(e.navigator.appVersion.match(/android/gi),e.navigator.appVersion.match(/iphone/gi)),m=e.devicePixelRatio;c=1/(s=d?m>=3&&(!s||s>=3)?3:m>=2&&(!s||s>=2)?2:1:1)}if(i.setAttribute("data-dpr",s),!o)if((o=r.createElement("meta")).setAttribute("name","viewport"),o.setAttribute("content","initial-scale="+c+", maximum-scale="+c+", minimum-scale="+c+", user-scalable=no"),i.firstElementChild)i.firstElementChild.appendChild(o);else{var h=r.createElement("div");h.appendChild(o),r.write(h.innerHTML)}function v(){var t=i.getBoundingClientRect().width/10;i.style.fontSize=t+"px",l.rem=e.rem=t}e.addEventListener("resize",function(){clearTimeout(n),n=setTimeout(v,300)},!1),e.addEventListener("orientationchange",function(){clearTimeout(n),n=setTimeout(v,300)},!1),e.addEventListener("pageshow",function(e){e.persisted&&(clearTimeout(n),n=setTimeout(v,300))},!1),"complete"===r.readyState?r.body.style.fontSize=12*s+"px":r.addEventListener("DOMContentLoaded",function(){r.body.style.fontSize=12*s+"px"},!1),v(),l.dpr=e.dpr=s,l.refreshRem=v,l.rem2px=function(e){var t=parseFloat(e)*this.rem;return"string"==typeof e&&e.match(/rem$/)&&(t+="px"),t},l.px2rem=function(e){var t=parseFloat(e)/this.rem;return"string"==typeof e&&e.match(/px$/)&&(t+="rem"),t}}(window,window.lib||(window.lib={}))},3:function(e,t,n){"use strict";function r(e){for(var t=e+"=",n=document.cookie.split(";"),r=0;r<n.length;r++){var i=n[r].trim();if(0==i.indexOf(t))return i.substring(t.length,i.length)}return""}function i(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),n=window.atob(t),r=new Uint8Array(n.length),i=0;i<n.length;++i)r[i]=n.charCodeAt(i);return r}t.a=function(e,t){"serviceWorker"in navigator&&(navigator.serviceWorker.register(e,{scope:t}),navigator.serviceWorker.ready.then(function(e){!function(e){if("PushManager"in window)e.pushManager.getSubscription().then(function(t){const n={userVisibleOnly:!0,applicationServerKey:i("BBTV_sGMbDL47vda7QEleoJiiEV0iBGGHwXPeZFMgFLlr8OTFlF-l-7abUpy5bgQK70_SMVoITkNXPvm4q38pjM")};return e.pushManager.subscribe(n).then(function(e){let t=e.toJSON();fetch("/pwapush/save",{method:"POST",mode:"cors",credentials:"include",headers:{"x-csrf-token":r("csrfToken"),"content-type":"application/json"},body:JSON.stringify(t)}).then(e=>{console.log(e)})})})}(e)}),Notification.requestPermission().then(e=>{"denied"===Notification.permission&&console.log("Permission for Notifications was denied")}))}},4:function(e,t,n){"use strict";n(77),n(79),n(81)},50:function(e,t,n){"use strict";n.r(t);var r=n(5);n.n(r)()(".header").html("jquery change two html lalala");n(85),n(2);var i=n(3);n(4);Object(i.a)("/sw-ssr.js","/ssr")},77:function(e,t){},79:function(e,t){},81:function(e,t){},85:function(e,t){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,