!function(t){function e(e){for(var n,s,o=e[0],l=e[1],c=e[2],d=0,p=[];d<o.length;d++)s=o[d],a[s]&&p.push(a[s][0]),a[s]=0;for(n in l)Object.prototype.hasOwnProperty.call(l,n)&&(t[n]=l[n]);for(u&&u(e);p.length;)p.shift()();return r.push.apply(r,c||[]),i()}function i(){for(var t,e=0;e<r.length;e++){for(var i=r[e],n=!0,o=1;o<i.length;o++){var l=i[o];0!==a[l]&&(n=!1)}n&&(r.splice(e--,1),t=s(s.s=i[0]))}return t}var n={},a={2:0},r=[];function s(e){if(n[e])return n[e].exports;var i=n[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=t,s.c=n,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="";var o=window.webpackJsonp=window.webpackJsonp||[],l=o.push.bind(o);o.push=e,o=o.slice();for(var c=0;c<o.length;c++)e(o[c]);var u=l;r.push([47,0]),i()}([,,function(t,e){!function(t,e){var i,n=t.document,a=n.documentElement,r=n.querySelector('meta[name="viewport"]'),s=n.querySelector('meta[name="flexible"]'),o=0,l=0,c=e.flexible||(e.flexible={});if(r)(d=r.getAttribute("content").match(/initial\-scale=([\d\.]+)/))&&(l=parseFloat(d[1]),o=parseInt(1/l));else if(s){var u=s.getAttribute("content");if(u){var d=u.match(/initial\-dpr=([\d\.]+)/),p=u.match(/maximum\-dpr=([\d\.]+)/);d&&(o=parseFloat(d[1]),l=parseFloat((1/o).toFixed(2))),p&&(o=parseFloat(p[1]),l=parseFloat((1/o).toFixed(2)))}}if(!o&&!l){var v=(t.navigator.appVersion.match(/android/gi),t.navigator.appVersion.match(/iphone/gi)),f=t.devicePixelRatio;l=1/(o=v?f>=3&&(!o||o>=3)?3:f>=2&&(!o||o>=2)?2:1:1)}if(a.setAttribute("data-dpr",o),!r)if((r=n.createElement("meta")).setAttribute("name","viewport"),r.setAttribute("content","initial-scale="+l+", maximum-scale="+l+", minimum-scale="+l+", user-scalable=no"),a.firstElementChild)a.firstElementChild.appendChild(r);else{var h=n.createElement("div");h.appendChild(r),n.write(h.innerHTML)}function m(){var e=a.getBoundingClientRect().width/10;a.style.fontSize=e+"px",c.rem=t.rem=e}t.addEventListener("resize",function(){clearTimeout(i),i=setTimeout(m,300)},!1),t.addEventListener("orientationchange",function(){clearTimeout(i),i=setTimeout(m,300)},!1),t.addEventListener("pageshow",function(t){t.persisted&&(clearTimeout(i),i=setTimeout(m,300))},!1),"complete"===n.readyState?n.body.style.fontSize=12*o+"px":n.addEventListener("DOMContentLoaded",function(){n.body.style.fontSize=12*o+"px"},!1),m(),c.dpr=t.dpr=o,c.refreshRem=m,c.rem2px=function(t){var e=parseFloat(t)*this.rem;return"string"==typeof t&&t.match(/rem$/)&&(e+="px"),e},c.px2rem=function(t){var e=parseFloat(t)/this.rem;return"string"==typeof t&&t.match(/px$/)&&(e+="rem"),e}}(window,window.lib||(window.lib={}))},function(t,e,i){"use strict";function n(t,e){window.addEventListener("load",function(){navigator.serviceWorker.register(t,{scope:e}).then(function(t){console.log("ServiceWorker registration successful with scope: ",t.scope)}).catch(function(t){console.log("ServiceWorker registration failed: ",t)})})}e.a=function(t,e){"serviceWorker"in navigator&&(navigator.serviceWorker?navigator.serviceWorker.getRegistration(e).then(function(i){i?console.log(i):n(t,e)}):n(t,e),Notification.requestPermission().then(t=>{"denied"===Notification.permission&&console.log("Permission for Notifications was denied")}))}},,,,,,,,,,,,,,function(t,e,i){"use strict";var n=i(58);i.n(n).a},function(t,e,i){"use strict";var n=i(60);i.n(n).a},function(t,e,i){"use strict";var n=i(62);i.n(n).a},function(t,e,i){"use strict";var n=i(64);i.n(n).a},function(t,e,i){"use strict";var n=i(66);i.n(n).a},,,,,,,,,,,,,,,,,,,function(t,e,i){"use strict";var n=i(68);i.n(n).a},function(t,e,i){"use strict";var n=i(70);i.n(n).a},function(t,e,i){"use strict";var n=i(72);i.n(n).a},,,,,function(t,e,i){"use strict";i.r(e);var n=i(7),a=function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{id:"app"}},[e("router-view")],1)};a._withStripped=!0;var r={name:"app"},s=(i(17),i(0)),o=Object(s.a)(r,a,[],!1,null,null,null);o.options.__file="spa/app.vue";var l=o.exports,c=(i(2),i(10)),u=function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"site-wrap"},[e("header",{staticClass:"site-header"},[e("top")],1),this._v(" "),e("section",{staticClass:"site-content"},[e("div",{staticClass:"site-content-inner"},[e("router-view")],1)]),this._v(" "),e("footer",{staticClass:"site-footer"},[e("bottom")],1)])};u._withStripped=!0;var d=function(){var t=this.$createElement;this._self._c;return this._m(0)};d._withStripped=!0;var p={name:"top"},v=(i(18),Object(s.a)(p,d,[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"site-top"},[e("a",{attrs:{href:"#/"}},[e("h1")])])}],!1,null,null,null));v.options.__file="spa/component/top.vue";var f=v.exports,h=function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"site-bottom"},[e("a",{class:["videos"==this.select?"cur":""],attrs:{href:"#/index"}},[this._v("主页")]),this._v(" "),e("a",{class:["news"==this.select?"cur":""],attrs:{href:"#/index/news"}},[this._v("新闻")])])};h._withStripped=!0;var m={name:"bottom",computed:{select(){return this.$route.name}}},_=(i(19),Object(s.a)(m,h,[],!1,null,null,null));_.options.__file="spa/component/bottom.vue";var w={name:"page",components:{top:f,bottom:_.exports}},g=(i(20),Object(s.a)(w,u,[],!1,null,null,null));g.options.__file="spa/page/index.vue";var b=g.exports,x=function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"site-wrap no-bottom"},[e("header",{staticClass:"site-header"},[e("top")],1),this._v(" "),e("section",{staticClass:"site-content"},[e("div",{staticClass:"site-content-inner"},[e("router-view")],1)])])};x._withStripped=!0;var y={name:"nobottom",components:{top:f}},C=(i(21),Object(s.a)(y,x,[],!1,null,null,null));C.options.__file="spa/page/noBottom.vue";var S=C.exports,j=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"video-list"},[t.loaded?t._l(t.list,function(e,n){return i("a",{key:n,staticClass:"video-card",attrs:{href:"#/detail?id="+e.id}},[i("div",{style:{backgroundImage:"url("+e.icon+")"}}),t._v(" "),i("p",[t._v(t._s(e.title))])])}):t._l(t.loadShowNum,function(e,n){return i("div",{key:n,staticClass:"default-video-card"},[i("span"),t._v(" "),i("p")])})],2)};j._withStripped=!0;var E=i(5),O=i.n(E),k={cacheNService(t,e){"caches"in window&&caches.match(t).then(function(t){t&&t.json().then(function(t){e(t)})}),O.a.get(t).then(t=>{e(t.data)})}},$={name:"videos",data:()=>({list:[],loaded:!1,loadShowNum:12}),methods:{renderData(t){this.loaded=!0,0==t.error&&(this.list=t.data)},service(){k.cacheNService("/api/v1/videos",this.renderData)}},mounted(){this.service()}},N=(i(40),Object(s.a)($,j,[],!1,null,null,null));N.options.__file="spa/page/content/index.vue";var T=N.exports,F=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"news-list"},[t.loaded?t._l(t.list,function(e,n){return i("a",{key:n,staticClass:"news-card",attrs:{href:"#/detail?id="+e.id}},[i("p",[t._v(t._s(e.sectitle))]),t._v(" "),i("div",{style:{backgroundImage:"url("+e.icon+")"}})])}):t._l(t.defaultNum,function(e,n){return i("div",{key:n,staticClass:"default-news-card"},[i("p"),t._v(" "),i("span")])})],2)};F._withStripped=!0;var P={name:"news",data:()=>({list:[],defaultNum:12,loaded:!1}),methods:{renderData(t){this.loaded=!0,0==t.error&&(this.list=t.data)},service(){k.cacheNService("/api/v1/news",this.renderData)}},mounted(){this.service()}},D=(i(41),Object(s.a)(P,F,[],!1,null,null,null));D.options.__file="spa/page/content/news.vue";var L=D.exports,M=function(){var t=this,e=t.$createElement,i=t._self._c||e;return t.detail&&t.loaded?i("div",{staticClass:"detail"},[i("div",{staticClass:"detail-title"},[t._v(t._s(t.detail.title))]),t._v(" "),i("div",{staticClass:"detail-user"},[t._v("作者："+t._s(t.detail.user))]),t._v(" "),i("div",{staticClass:"detail-img",style:{backgroundImage:"url("+t.detail.icon+")"}}),t._v(" "),i("p",{staticClass:"detail-content"},[t._v(t._s(t.detail.content))])]):i("div",{staticClass:"default-detail-card"},[i("div",{staticClass:"detail-title"}),t._v(" "),i("div",{staticClass:"detail-user"}),t._v(" "),i("div",{staticClass:"detail-img"}),t._v(" "),i("div",{staticClass:"detail-content"},t._l(12,function(t,e){return i("p",{key:e})}),0)])};M._withStripped=!0;var W={name:"videos",data:()=>({detail:null,loaded:!1}),methods:{renderData(t){this.loaded=!0,0==t.error&&(this.detail=t.data)},service(){let t="/api/v1/detail/"+this.$route.query.id;k.cacheNService(t,this.renderData)}},mounted(){this.service()}},A=(i(42),Object(s.a)(W,M,[],!1,null,null,null));A.options.__file="spa/page/content/detail.vue";var q=A.exports;n.a.use(c.a);var z=new c.a({routes:[{path:"/",redirect:"/index"},{path:"/index",name:"home",component:b,children:[{path:"",redirect:"videos"},{path:"videos",name:"videos",component:T},{path:"news",name:"news",component:L}]},{path:"/detail",name:"detail",component:S,children:[{path:"",component:q}]}]}),I=i(3);Object(I.a)("/sw-spa.js","/spa"),n.a.config.prodcutionTip=!1,new n.a({router:z,render:t=>t(l)}).$mount("#app")},,,,,,,,,,,function(t,e){},,function(t,e){},,function(t,e){},,function(t,e){},,function(t,e){},,function(t,e){},,function(t,e){},,function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,